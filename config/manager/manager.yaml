apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: operator
  namespace: system
  labels:
    app: openshift-builds-operator
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      app: openshift-builds-operator
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app: openshift-builds-operator
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /operator
        args:
        - --leader-elect
        image: operator:latest
        imagePullPolicy: Always
        name: operator
        env:
          # TODO: This needs code changes upstream
          # - name: USE_MANAGED_WEBHOOK_CERTS
          #   value: "false"
          - name: PLATFORM
            value: "openshift"
          - name: IMAGE_SHIPWRIGHT_SHIPWRIGHT_BUILD
            value: registry.redhat.io/openshift-builds/openshift-builds-controller-rhel9@sha256:78ee35ccc70b78638c667152b7b6247417c0aa1bb6d3f817d59b22eb179899ca
          - name: IMAGE_SHIPWRIGHT_GIT_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-git-cloner-rhel9@sha256:87c4c0e9fe4d9baf8ae4f191c51d90c46729273e182fb5b3dfd951632e7bfad3
          - name: IMAGE_SHIPWRIGHT_IMAGE_PROCESSING_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-image-processing-rhel9@sha256:a91c2bb1239ef7fbce8c1ab9308da03b533df9cea75c7d978fd76f38087bc912
          - name: IMAGE_SHIPWRIGHT_BUNDLE_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-image-bundler-rhel9@sha256:775c15b93b19ba855791d34c4a95ef203dd9f8e51110c67ebf131e38eda49422
          - name: IMAGE_SHIPWRIGHT_WAITER_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-waiters-rhel9@sha256:ebfe4f8a97f6f0f9afe38953ae8cc2fdf2ec0b76401c819bb12c1df7cd671e9e
          - name: IMAGE_SHIPWRIGHT_SHP_BUILD_WEBHOOK
            value: registry.redhat.io/openshift-builds/openshift-builds-webhook-rhel9@sha256:2b288e36e3606cf8a0d7723772edb8d4ac11772ec450539ef3448ad517155ecb
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: operator
      terminationGracePeriodSeconds: 10
